<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20151212173315.1"><vh>@settings</vh>
<v t="leo.20151212173315.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20151212173315.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160306101815.1"><vh>網站規劃</vh>
<v t="amd.20160306101823.1"><vh>code4future.org</vh></v>
<v t="amd.20160306182104.1"><vh>內容分類</vh></v>
</v>
<v t="amd.20160309162721.1"><vh>Wordpress 端</vh>
<v t="amd.20160309162721.2"><vh>@button new to wp (pelican)</vh>
<v t="amd.20160309162721.3"><vh>md 檔案的格式</vh></v>
<v t="amd.20160309162721.4"><vh>將 md 節點內容送到 Wordpress 方法</vh></v>
</v>
<v t="amd.20160309162721.5"><vh>@button edit to wp (pelican)</vh></v>
<v t="amd.20160309175129.1"><vh>@button get from wp (pelican)</vh>
<v t="amd.20160309175129.2"><vh>程式設計考量</vh></v>
</v>
<v t="amd.20160309162721.8"><vh>Leo Editor 程式開發</vh></v>
</v>
<v t="amd.20160106095324.1" a="E"><vh>@path ./../</vh>
<v t="leo.20151213173811.1" a="E"><vh>假如要送到 gh-pages 分支, 使用下列按鈕</vh>
<v t="leo.20151212173658.1"><vh>@button gh-pages pelican</vh></v>
</v>
<v t="leo.20151213173830.1" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="leo.20151213085727.1"><vh>@button local pelican</vh></v>
</v>
<v t="amd.20160117010542.1"><vh>@button git rm -rf blog</vh></v>
<v t="amd.20151215180106.1"><vh>設定與開發</vh>
<v t="amd.20151216151325.1"><vh>@edit index.html</vh></v>
<v t="amd.20151216152209.1"><vh>@edit README.md</vh></v>
<v t="leo.20151213230723.1"><vh>Pelican 設定</vh>
<v t="leo.20151213230957.1"><vh>文章 Date 設定</vh></v>
<v t="leo.20151213230729.1"><vh>使用 summary plugin</vh></v>
</v>
<v t="amd.20151215170117.1"><vh>以下 pelicanconf.py 為近端與遠端的共同設定</vh></v>
<v t="leo.20151212173725.1"><vh>@edit pelicanconf.py</vh></v>
<v t="amd.20151215170142.1"><vh>以下 publishconf.py 為遠端所使用的設定</vh></v>
<v t="leo.20151212173803.1"><vh>@edit publishconf.py</vh></v>
<v t="amd.20151215170221.1"><vh>以下 local_publishconf.py 為近端所使用的設定</vh></v>
<v t="leo.20151213085752.1"><vh>@edit local_publishconf.py</vh></v>
<v t="amd.20151215121740.1" a="E"><vh>@path theme</vh>
<v t="amd.20151215121758.1" a="E"><vh>@path pelican-bootstrap3</vh>
<v t="amd.20151215121816.1" a="E"><vh>@path templates</vh>
<v t="amd.20151215121827.1"><vh>@edit base.html</vh></v>
<v t="amd.20151215121849.1"><vh>@edit search.html</vh></v>
<v t="amd.20151215152634.1"><vh>@edit tags.html</vh></v>
</v>
<v t="amd.20151216181314.1" a="E"><vh>@path static</vh>
<v t="amd.20151216181314.2" a="E"><vh>@path css</vh>
<v t="amd.20151216181314.3" a="E"><vh>@path pygments</vh>
<v t="amd.20151216181314.4"><vh>@edit fruity.css</vh></v>
</v>
</v>
</v>
</v>
<v t="amd.20151215154950.1" a="E"><vh>@path pelican-bootstrap3_local</vh>
<v t="amd.20151215154950.2"><vh>@path templates</vh>
<v t="amd.20151215154950.3"><vh>@edit base.html</vh></v>
<v t="amd.20151215154950.4"><vh>@edit search.html</vh></v>
<v t="amd.20151215162536.1" a="E"><vh>@path includes</vh>
<v t="amd.20151215162510.1"><vh>@edit sidebar.html</vh></v>
</v>
<v t="amd.20151215154950.5"><vh>@edit tags.html</vh></v>
</v>
<v t="amd.20151216173334.1" a="E"><vh>@path static</vh>
<v t="amd.20151216173344.1" a="E"><vh>@path css</vh>
<v t="amd.20151216173352.1" a="E"><vh>@path pygments</vh>
<v t="amd.20151216173409.1"><vh>@edit fruity.css</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="amd.20151215170326.1"><vh>以下在修改或查驗 plugin 目錄下的檔案</vh></v>
<v t="amd.20151215154225.1" a="E"><vh>@path plugin</vh>
<v t="amd.20151215154238.1" a="E"><vh>@path tipue_search</vh>
<v t="amd.20151215154248.1"><vh>@edit tipue_search.py</vh></v>
</v>
</v>
</v>
</v>
<v t="amd.20151215170350.1"><vh>以下為 content 目錄中的 md 檔案</vh></v>
<v t="amd.20160106093610.1"><vh>協同網誌編寫規範</vh></v>
<v t="amd.20151216001126.1"><vh>md 檔案範例</vh></v>
<v t="amd.20151215170031.1" a="E"><vh>@path ./../content</vh>
<v t="amd.20160106093454.1" a="E"><vh>網誌 md 檔案</vh>
<v t="amd.20160213095053.1" a="E"><vh>201602</vh>
<v t="amd.20160224170554.1"><vh>@clean c4f_20160225.md</vh>
<v t="amd.20160309174033.1"><vh>10</vh></v>
</v>
<v t="amd.20160224171626.1"><vh>@clean c4f_20160225-1.md</vh>
<v t="amd.20160319074114.1"><vh>18</vh></v>
</v>
</v>
<v t="amd.20160306214231.1" a="E"><vh>201603</vh>
<v t="amd.20160306214240.1"><vh>@clean c4f_20160306-1.md</vh>
<v t="amd.20160319074122.1"><vh>20</vh></v>
</v>
<v t="amd.20160306214335.1"><vh>@clean c4f_20160306-2.md</vh>
<v t="amd.20160319074059.1"><vh>16</vh></v>
</v>
<v t="amd.20160319123316.1"><vh>下一則只有標題與 id 的文章, 只送到 WP</vh></v>
<v t="amd.20160309191406.1"><vh>掌握未來, 速學編程</vh>
<v t="amd.20160309191408.1"><vh>1</vh></v>
</v>
<v t="amd.20160319123605.1"><vh>@clean c4f_20160319.md</vh>
<v t="amd.20160319132434.1"><vh>24</vh></v>
</v>
<v t="amd.20160319222458.1"><vh>@clean c4f_20160319-1.md</vh>
<v t="amd.20160319230246.1"><vh>27</vh></v>
</v>
<v t="amd.20160319232117.1"><vh>@clean c4f_20160319-2.md</vh></v>
<v t="amd.20160320001047.1"><vh>@clean c4f_20160320.md</vh></v>
</v>
</v>
</v>
<v t="amd.20160106094754.1" a="E"><vh>@path ./../content/pages</vh>
<v t="amd.20160106094829.1" a="E"><vh>code4future pages 文章</vh>
<v t="amd.20160106094844.1"><vh>@edit cf4_pages_1.md</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20151215121740.1"></t>
<t tx="amd.20151215121758.1"></t>
<t tx="amd.20151215121816.1"></t>
<t tx="amd.20151215154225.1"></t>
<t tx="amd.20151215154238.1"></t>
<t tx="amd.20151215154950.1"></t>
<t tx="amd.20151215154950.2"></t>
<t tx="amd.20151215162536.1"></t>
<t tx="amd.20151215170031.1"></t>
<t tx="amd.20151215170117.1"></t>
<t tx="amd.20151215170142.1"></t>
<t tx="amd.20151215170221.1"></t>
<t tx="amd.20151215170326.1"></t>
<t tx="amd.20151215170350.1"></t>
<t tx="amd.20151215180106.1"></t>
<t tx="amd.20151216001126.1">@language md
Title: 文章標題
Category: 類別
Tags: 標籤
Author: code4future

這裡放入文章摘要

&lt;!-- PELICAN_END_SUMMARY --&gt;

這裡為文章主要內容</t>
<t tx="amd.20151216173334.1"></t>
<t tx="amd.20151216173344.1"></t>
<t tx="amd.20151216173352.1"></t>
<t tx="amd.20151216181314.1"></t>
<t tx="amd.20151216181314.2"></t>
<t tx="amd.20151216181314.3"></t>
<t tx="amd.20160106093454.1"></t>
<t tx="amd.20160106093610.1">協同成員的 .leo 檔案

    每一位協同者, 各自可以在 users 目錄下擁有一個 .leo 檔案, 用來維護各自位於 content 目錄下的 .md 檔案,
    
    例如: user code4future 的 .leo 檔案位於 users/c4f.leo

協同成員的 .md 檔案命名

    由於各成員所編寫的 .md 檔案都位於 content 目錄下, 因此必須在各負責的 .md 檔案名稱冠上用戶名稱,
    
    例如: 由 code4future 負責編寫的 .md 檔案, 特別命名為 c4f_20160106.md, 若一天有兩篇以上文章, 則取 c4f_20160106-1.md
    
    當使用者要利用 pelican 在近端轉換網誌時, 必須使用 local-pelican 按鈕, 若要送到 github pages 網站, 則必須透過 gh-pages-pelican 按鈕轉檔.

pages 文章

    寫在 content/pages 目錄中的 .md 檔案, 將會被轉為網誌 pages 內容

</t>
<t tx="amd.20160106094754.1"></t>
<t tx="amd.20160106094829.1"></t>
<t tx="amd.20160106095324.1"></t>
<t tx="amd.20160117010542.1">@language python
import os
os.system("git rm -rf blog")
g.es("git rm -rf blog 執行完畢")</t>
<t tx="amd.20160213095053.1"></t>
<t tx="amd.20160224170554.1">@language md
Title: 為什麼大家都要你學電腦?
Category: K-12
Tags: Reeborg 機器人
Author: code4future
@others
學電腦?學習寫程式?然後呢?

&lt;!-- PELICAN_END_SUMMARY --&gt;

學電腦是一個非常廣的題目, 因為電腦原來的意思是計算器, 現在的計算器到處都是, 從冷氣的溫度控制到手機, 都是不同等級的電腦. 所以嚴格來說, 與電腦有關的學習是學不完的, 當全世界許多現代人都已經離不開電腦的時候, 所謂的學電腦, 應該是指:

1. 了解電腦的基本軟體與硬體運作原理
2. 了解電腦的基本操作方法
3. 了解如何操控電腦, 並且用電腦來協助解決問題

接著來回答, 為什麼大家都叫你學電腦?最主要的原因就是, 現代人無論從事那一個行業, 都需要依賴電腦來解決問題, 所以假如學生能夠從小就知道什麼叫作數位運算, 有那些特性, 與現實世界的運作有那些關聯, 學習如何利用電腦來增加工作效率, 那麼才能在父母與老師的協助下, 真正發揮電腦的功用.

這一篇文章的類別是: K-12, K 指的是幼稚園的學生, 也就是五歲到六歲的孩童, 我們當然不是寫文章給幼稚園的小朋友看的, 但這裡指的 12, 就是 12 年國教的學生, 從小學一年級開始到高中畢業, 總共 12 年, 假如你是國小高年級以上的學生, 已經可以利用 Code4future 網站上的資料, 進行自學, 但是我們並不鼓勵你們這樣做, 因為你們還沒有成年, 也就是還沒有滿十八歲, 根據我們的經驗, 未成年的學生是不允許獨自上網的, 希望能夠在家長或老師的指導下, 下載 Code4future 上的教案資料, 可以在沒有外部網路 (也稱為廣域網路) 的單機或內部網路上執行.

我們特別鼓勵過去以為學電腦就是玩遊戲的國小高年級學生, 能夠在家長與老師的協助下, 儘早學習利用電腦來解決問題的訣竅, 讓你可以更加了解學習的樂趣, 並且有效率地學習其他學科, 以便空出更多時間發展個人技藝或專長.

這裡要介紹的電腦程式學習課程之一是 Reeborg 機器人: &lt;http://reeborg.ca/world.html&gt;, 假如你用瀏覽器打開這個頁面之後, 完全看不懂其中的英文字與說明段落, 我們希望你不要用翻譯軟體來看這些資料, 因為我們要告訴你, 想學好電腦, 英文能力是必備條件, 而且基本的數學能力也是有效運用電腦的另一個必要條件, 所以不要以為只要學會使用電腦, 就可以丟開其他課本, 正確的學習電腦觀念是:

1. 未成年學生不要獨自上網, 因為網路上沒有用的東西比有用的資料, 多了許多, 你要在老師與家長的安排之下才能使用電腦與網路.
2. 電腦與數學及英文, 或者其他各種學科, 都有很密切的關聯, 學習電腦是要讓你的學習更有效率, 及早掌握現代人協同合作的方式.
3. 學習電腦的主要目的在解決問題, 這些問題當然包括用有效率的方式來提供使用者遊戲或運動或玩樂.

最後, 我們再次提醒你, 為什麼大家都叫你學電腦? 因為我們希望你未來能夠快速融入國際社會, 利用電腦解決各種問題, 做一個有用的青年, 造福社會!

</t>
<t tx="amd.20160224171626.1">@language md
Title: 家長如何制定網路使用政策
Category: 家長
Tags: 網路操作
Author: code4future
@others
無論您從事那一個行業, 週遭一定充滿了各種網路與大小電腦的應用, 從大樓的門禁開始, 電梯、飲水機, 更不用提許多人辦公地點幾乎都各有一台桌上型或筆記型的個人電腦, 透過無線或有線網路與各種資訊系統或網站相連, 未來, 有關網路與電腦的各種應用, 更會密切涉入現代人的生活.

&lt;!-- PELICAN_END_SUMMARY --&gt;

因此, 身為家長的您, 除了必須體認到未來的現代國民已經離不開網路與電腦之外, 必須了解目前全世界有關網路內容分級, 都是採取軟性的自我管制模式, 所以各位家長必須自己在家裡, 嚴格制定未成年兒童的網路使用政策.

我們的認知:

未成年兒童, 不應該獨自使用公共網路, 更不應該在沒有家長的管制下, 上網交友.

根據 Facebook 的規定 &lt;a href="https://www.facebook.com/help/210644045634222"&gt;13 歲以上&lt;/a&gt; 才能建立帳號, 也就是 grade 7, 國中之後的年輕人才能夠使用臉書, 所以身為家長, 必須限制國小學童在家自由使用網路與電腦 (包括手機) 的權力, 假如配合學校功課的要求,  13 歲之前的孩童, 最好是在家長的陪同下使用廣域網路與電腦.
</t>
<t tx="amd.20160306101815.1"></t>
<t tx="amd.20160306101823.1">code4future.org 會 redirect 到 www.code4future.org, 然後再 redirect 到 www.code4future.org/blog/

然後其中再根據服務對象:

未成年學員 - 想透過編程學習, 克服未來挑戰的 K-12
家長 - K-12 學員的父母或其他家庭長輩
教師 - 有意推廣未成年學員編程教育的成年人
社會人士 - 想透過編程學習, 克服未來職場挑戰的成年人

建立相關教案內容

</t>
<t tx="amd.20160306182104.1">Green logo - 綠色 (成長中) - 未成年學員
Red logo - 紅色 (隨時保持紅色警戒) - 家長
Blue logo - 藍色 (指引美麗藍天所在的團隊) -  教師
Yellow logo - 黃色 (以黃皮膚的華人為主要對象) - 社會人士

Black logo - 黑色 - 通用內容</t>
<t tx="amd.20160306214231.1"></t>
<t tx="amd.20160306214240.1">@language md
Title: 有關學童電腦教學
Category: 教師
Tags: 導引
Author: code4future
@others
數位運算裝置融入各種教學的趨勢已經不可避免, 身為幼稚園到國小的教師, 可以利用現有的優秀教材來推廣學童電腦教學.

&lt;!-- PELICAN_END_SUMMARY --&gt;

這裡先介紹來自台灣, 兩個很棒的線上教材:

1. 均一教育平台: &lt;a href="http://www.junyiacademy.org/"&gt;http://www.junyiacademy.org/&lt;/a&gt;
2. 橘子蘋果程式設計學苑: &lt;a href="https://orangeapple.co/"&gt;https://orangeapple.co/&lt;/a&gt;

均一平台上的電腦課程:

Scratch: &lt;a href="http://www.junyiacademy.org/root/isc"&gt;http://www.junyiacademy.org/root/isc&lt;/a&gt;

Javascript: &lt;a href="http://www.junyiacademy.org/root/ijs"&gt;http://www.junyiacademy.org/root/ijs&lt;/a&gt;

一小時玩程式: &lt;a href="http://www.junyiacademy.org/computer-science-a/ihc"&gt;http://www.junyiacademy.org/computer-science-a/ihc&lt;/a&gt;

數學式與 LaTeX: &lt;a href="http://www.junyiacademy.org/computer-science-a/i5t"&gt;http://www.junyiacademy.org/computer-science-a/i5t&lt;/a&gt;

橘子蘋果開放教材: &lt;a href="https://orangeapple.co/csr/open-material"&gt;https://orangeapple.co/csr/open-material&lt;/a&gt;

最後則介紹來自美國哈佛大學的 Scratch 開放教材: &lt;a href="http://scratched.gse.harvard.edu/guide/"&gt;http://scratched.gse.harvard.edu/guide/&lt;/a&gt;
</t>
<t tx="amd.20160306214335.1">@language md
Title: 有關社會人士學習電腦
Category: 社會人士
Tags: 電腦基本功能
Author: code4future
@others
社會人士學習電腦的課題很廣, 我們只能提供較為基本的電腦使用功能與觀念的導引, 例如, 有關 Windows 與 Ubuntu 操作系統的取捨, 如何運用網路與網站來提升工作效率等.

&lt;!-- PELICAN_END_SUMMARY --&gt;

Code4Future 將與社會人士學習電腦的主題劃分為:

1. 電腦基本軟硬體層次, 桌上型、筆記型與卡片型電腦的取捨, Windows 或 Ubuntu 操作系統?
2. 基本的本地端網路協定、設定與應用
3. 區域網路上的全球資訊網伺服器與雲端全球資訊網伺服器的應用

全球資訊網上, 免費學習電腦編程的網站:

CodeCademy：

&lt;a href="https://www.codecademy.com/"&gt;https://www.codecademy.com/&lt;/a&gt;

FreeCodeCamp:

&lt;a href="https://www.freecodecamp.com/"&gt;https://www.freecodecamp.com/&lt;/a&gt;

Udemy:

&lt;a href="https://www.udemy.com/"&gt;https://www.udemy.com/&lt;/a&gt;

Khanacademy:

&lt;a href="https://www.khanacademy.org/computing/computer-programming"&gt;https://www.khanacademy.org/computing/computer-programming&lt;/a&gt;</t>
<t tx="amd.20160309162721.1"></t>
<t tx="amd.20160309162721.2">@language python
#coding: utf-8
import xmlrpc.client
import datetime
import os

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的 body pan 內容, 第1行為 @language python
    # 用跳行符號分割
    data_list = data.split("\n")
    #第2行為 title
    title= data_list[1]
    #第3行為 category
    category = data_list[2]
    #第4行為 tags
    tags = data_list[3]
    # 有多項資料的 content 型別為數列
    # 再將第7行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[6:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Wordpress 的 &lt;!-more-&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    content = content.replace('~~~python', '[code lang="python"]')
    content = content.replace('~~~', '[/code]')
    return title, category, tags, content
    
os.environ['TZ'] = 'Asia/Taipei'

#################################
filepath = "/home/amd/Desktop/www-code4future.txt"
wordpress = "www.code4future.org"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()

# 從網誌節點的 parent().h 取得 wp_url
# 從網誌節點的 parent().b 取得帳號與密碼對應的文字檔案路徑
wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################
wp_blogid = "0"
 
status_draft = 0
status_published = 1
 
server = xmlrpc.client.ServerProxy(wp_url)

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 指定時間出版
'''
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime("2013-01-01 00:00",
"%Y-%m-%d %H:%M"))
'''
# 以現在時間出版, 考慮與 Server 時間差八個小時 (480 分鐘), 因此要在 8 個小時前發表
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime((datetime.datetime.now()- \
datetime.timedelta(minutes=480)).strftime('%Y-%m-%d %H:%M'),"%Y-%m-%d %H:%M"))
categories = [category_str.split(":")[1]]
# 請注意, 因為 tags 用逗點隔開, 因此必須透過 split() 再分開成為 list 資料
# 先用 : 斷開標投頭的 Tags:, 然後再透過逗點隔開, 將標註轉為數列資料
tags = tags_str.split(":")[1].split(",")
data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}
 
post_id = server.metaWeblog.newPost(wp_blogid, wp_username, wp_password, data, status_published)
# 利用最後的 child 節點來儲存 post_id
to_save_post_id = p.insertAsLastChild()   
# 改為內文為空的節點, id 直接標在 head 標題 
to_save_post_id.b = ""
to_save_post_id.h = post_id
# 因為新增節點, commander 必須 redraw
c.redraw() 

g.es("post_id 為", post_id)
g.es("已經送出資料!")

'''
其他 metaWeblog 的用法:
metaWeblog.newPost (blogid, username, password, struct, publish) returns string(postid)
metaWeblog.editPost (postid, username, password, struct, publish) returns true
metaWeblog.getPost (postid, username, password) returns struct(blog content)
'''</t>
<t tx="amd.20160309162721.3">第1行 

    Title: yen - Github Pages 網頁資料更新問題
    
第2行

    Category: Misc
    
第3行

    Tags: Github Pages
    
第4行

    Author: yen

&lt;!-- PELICAN_END_SUMMARY --&gt; 之前為 文章摘要

之後為文章內容, 但是

~~~python 必須換為 [code lang="python"]
~~~ 則換為 [/code]

然後再看看 &lt;a href="http://project.mde.tw"&gt;http://project.mde.tw&lt;/a&gt; 是否要直接採用 html anchor 或將

Pelican 的 &lt;http://project.mde.tw&gt; 轉為 html anchor 格式

此外, 將 .md 檔案的內容解讀後, 送到對應的 Wordpress 網站後, 將回傳在 .md 檔案的子節點, 加入一個"文章 id "的節點, 內文為該文章在 Wordpress 的 id 號碼

但是從 Pelican md 文章內容解讀後送到 Wordpress, 只支援 new 與 edit, 從 Wordpress 取回文章內容的流程還要再思考一下
</t>
<t tx="amd.20160309162721.4">滑鼠停在 .md 文章的對應節點, 然後按下 new-wp-pelican 按鈕,
完成後該 .md 節點下屬會傳回文章 id 節點, 標示在 Wordpress 的對應文章 id</t>
<t tx="amd.20160309162721.5">@language python
#coding: utf-8
import xmlrpc.client
import datetime
import os

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的 body pan 內容, 第1行為 @language python
    # 用跳行符號分割
    data_list = data.split("\n")
    #第2行為 title
    title= data_list[1]
    #第3行為 category
    category = data_list[2]
    #第4行為 tags
    tags = data_list[3]
    # 有多項資料的 content 型別為數列
    # 再將第7行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[6:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Wordpress 的 &lt;!-more-&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    content = content.replace('~~~python', '[code lang="python"]')
    content = content.replace('~~~', '[/code]')
    return title, category, tags, content
    
os.environ['TZ'] = 'Asia/Taipei'
 
#################################
filepath = "/home/amd/Desktop/www-code4future.txt"
wordpress = "www.code4future.org"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()

wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################
wp_blogid = "0"
 
status_draft = 0
status_published = 1
 
server = xmlrpc.client.ServerProxy(wp_url)

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 指定時間出版
'''
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime("2013-01-01 00:00",
"%Y-%m-%d %H:%M"))
'''
# 以現在時間出版, 考慮與 Server 時間差八個小時 (480 分鐘), 因此要在 8 個小時前發表
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime((datetime.datetime.now()- \
datetime.timedelta(minutes=480)).strftime('%Y-%m-%d %H:%M'),"%Y-%m-%d %H:%M"))
categories = [category_str.split(":")[1]]
# 請注意, 因為 tags 用逗點隔開, 因此必須透過 split() 再分開成為 list 資料
tags = tags_str.split(":")[1].split(",")
data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}

# 設法取得原 post 的 id
origin_post = p.getLastChild()
# 直接從標題取得 post 的 id 號碼
post_id = origin_post.h
status = server.metaWeblog.editPost(post_id, wp_username, wp_password, data, status_published)

if status:
    g.es("資料已經更新!")
else:
    g.es("有問題, 資料沒有更新!")
'''
其他 metaWeblog 的用法:
metaWeblog.newPost (blogid, username, password, struct, publish) returns string(postid)
metaWeblog.editPost (postid, username, password, struct, publish) returns true
metaWeblog.getPost (postid, username, password) returns struct(blog content)
'''</t>
<t tx="amd.20160309162721.8">execute-script predefines:

c: The commander of the present outline.
g: The leo.core.leoGlobals module.
p: The presently selected position, c.p.</t>
<t tx="amd.20160309174033.1"></t>
<t tx="amd.20160309175129.1">@language python
#coding: utf-8
import xmlrpc.client
# 導入 html 模組, 使用 html.unescape 轉換 html 特殊符號
import html
 
#################################
filepath = "/home/amd/Desktop/www-code4future.txt"
wordpress = "www.code4future.org"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()

# 從網誌節點的 parent().h 取得 wp_url
# 從網誌節點的 parent().b 取得帳號與密碼對應的文字檔案路徑
wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################

server = xmlrpc.client.ServerProxy(wp_url)

# 設法透過上述網誌網址, 帳號與密碼, 以及文章 id, 取回 categories, tags, 文章標題, 文章內容等資

# 從最後的 child 節點來取 post_id
origin_post = p.getLastChild()
post_id = origin_post.h
# 取回與 post_id 對應的網誌文章內容
blog_content = server.metaWeblog.getPost(post_id, wp_username, wp_password)
title = blog_content["title"]
# 這裡要利用 html.unescape 轉回特殊符號
description = html.unescape(blog_content["description"])
mt_text_more = html.unescape(blog_content["mt_text_more"])
if mt_text_more != "":
    post_content = description + "\n&lt;!--more--&gt;\n"+mt_text_more
else:
    post_content = description
# 所取回的 categories 為 list
categories = blog_content["categories"]
# 所取回的 tags 為以逗點隔開的字串
mt_keywords = blog_content["mt_keywords"]
# 取回文章作者
author = blog_content["wp_author_display_name"]
p.h = title
categories_str = ""
for category in categories:
    # 假如不是最後一個
    if category != categories[len(categories)-1]:
        categories_str += category + ", "
    else:
        # 這是最後一個
        categories_str += category
line1 = "@language md\n"
line2 = "Title: " +title + "\n"
line3 = "Category: " + categories_str + "\n"
line4 = "Tags: " + mt_keywords + "\n"
line5 = "Author: " + author + "\n@others\n"
post_content = post_content.replace('&lt;!--more--&gt;', '\n&lt;!-- PELICAN_END_SUMMARY --&gt;\n')
post_content = post_content.replace('[code lang="python"]', '~~~python')
post_content = post_content.replace('[/code]', '~~~')
p.b = line1 + line2 + line3 + line4 + line5 + post_content + "\n"
# 因為節點資料更新, commander 必須 redraw
c.redraw() 
g.es("資料已經取回")



</t>
<t tx="amd.20160309175129.2">俱備取回資料的權限

透過子節點的文章 id 與網誌網址, 以 xmlrpc 協定進行連線

取回 categories, tags, 文章標題與文章內容, 還有作者帳號?

分別按照格式, 將取回的資料放入對應節點

</t>
<t tx="amd.20160309191406.1">@language md
Title: 掌握未來, 速學編程
Category: K-12 學生
Tags: 導引
Author: code4future
@others
二十一世紀是數位運算與電腦編程充斥的世代.

&lt;!-- PELICAN_END_SUMMARY --&gt;

從小就學習程式的目的, 無非就是要這些未來的主人翁能夠及早了解數位系統的特性, 並且有效率地利用這些數位工具, 來解決類比世界所面臨的各種問題. 是的, 學習編程是要您用它來解決問題, 解決學習上的問題, 解決提升生活效能的問題, 解決單憑藉類比工具無法單獨解決的問題.
</t>
<t tx="amd.20160309191408.1"></t>
<t tx="amd.20160319074059.1"></t>
<t tx="amd.20160319074114.1"></t>
<t tx="amd.20160319074122.1"></t>
<t tx="amd.20160319123316.1">在這個 Leo Editor 專案中, 有 Pelican 靜態網誌系統的設定與實際將 md 檔轉為 html 的指令按鈕

而且每一則文章, 可以透過與 WP 對應的指令按鈕將文章轉換格式後, 送到對應的 Wordpress 動態網誌</t>
<t tx="amd.20160319123605.1">@language md
Title: 如何架構一個動靜皆宜的網誌系統
Category: 社會人士
Tags: 導引
Author: code4future
@others
全球資訊網上有兩種基本的 Blog 架構, 動態的網誌以 &lt;a href="https://wordpress.com/"&gt;Wordpress&lt;/a&gt; 為代表, 而靜態的網誌則以 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 為例.

&lt;!-- PELICAN_END_SUMMARY --&gt;

這一篇文章的目的, 在介紹 Code4Future 團隊如何利用 PHP、Python3, 在 OpenShift 雲端平台與 Github 版次管理系統中, 用同 Leo Editor 的專案架構, 以同一份內容, 幾乎同步地更新到動態與靜態的兩個網站.

首先, Code4Future 目前的動態網站為: &lt;a href="http://www.code4future.org"&gt;http://www.code4future.org&lt;/a&gt;, 而靜態網站則位於 &lt;a href="http://blog.code4future.org"&gt;http://blog.code4future.org&lt;/a&gt;.

其中的動態網站採用 &lt;a href="https://www.openshift.com/"&gt;Openshift&lt;/a&gt; 雲端平台建構, 而靜態網頁則架構在 &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; 上.

從 &lt;a href="https://github.com/code4futuretw/blogsite"&gt;https://github.com/code4futuretw/blogsite&lt;/a&gt; 倉儲, 可以取得 &lt;a href="http://blog.code4future.org"&gt;http://blog.code4future.org&lt;/a&gt; 靜態網誌上的所有資料 ,包括 Pelican 設定與 Leo Editor 專案檔中的所有按鈕指令程式碼.

首先來看, 如何在 OpenShift 建立一個 Wordpress 網誌:

1. 到 &lt;a href="https://www.openshift.com/"&gt;https://www.openshift.com/&lt;/a&gt; 申請一個帳號.
2. 收到 OpenShift 信件後, 按回電子郵箱的確認連結, 就可以開始在 OpenShift 雲端平台上建立應用程式.
3. 建立應用程式時, 選擇建立 Wordpress 類別的網誌, 並且選擇可用的網域名稱與應用程式名稱, 就可完成 Wordpress 起始設定.
4. 當建立 Wordpress 應用程式完成後, 使用者即可進行網誌的設定, 其中包括管理者帳號的建立與基本網誌設定.

至於 Github Pages 上的 &lt;a href="http://blog.code4future.org"&gt;http://blog.code4future.org&lt;/a&gt; 靜態網誌, 其架構則比較複雜, 一方面, 我們採用 &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 來管理所有資料. 當使用者從 &lt;a href="https://github.com/code4futuretw/blogsite"&gt;https://github.com/code4futuretw/blogsite&lt;/a&gt; 倉儲 git clone 資料到本地端之後, 必須依靠 Python3, PyQt, Pelican 與 Git 才能順利在本地端與 Github Page 分支端, 順利建立並管理這個靜態網誌系統.

此外, 我們建構靜態網頁系統的目的, 是希望爾後在實體課堂中推廣 Code4Future 的各階段教材時, 可以無需上到廣域網路, 利用隨身硬碟與區域網路就能夠上課. 因此 Github 倉儲中的 Pelican 系統又分為本地端與雲端平台上的轉檔設定. 使用本靜態網頁時, 基本工作流程如下:

1. 從 &lt;a href="https://github.com/code4futuretw/blogsite"&gt;https://github.com/code4futuretw/blogsite&lt;/a&gt; 倉儲, git clone 資料到本地端.
2. 確定工作目錄中為倉儲的 gh-pages 分支內容.
3. 利用 Leo Editor 5.1 以後的版本, 開啟 users 目錄下的 c4f.leo, 就可以看到本站的所有資料.
4. 修改設定檔案內容.
5. 根據網誌 md 檔案中的格式, 編寫新網誌文章.
6. 先利用本地端所屬的 local-pelican 按鈕建立網誌文章.
7. 本地端內容查詢無誤後, 再用 gh-pages-pelican 按鈕, 產升即將送到雲端上的 Pelican 網誌內容

至於將 Pelican 中的 .md 檔案內容, 送到 Wordpress, 則配合 new-to-wp-pelican, edit-to-wp-pelican 與 get-from-wp-pelican 等3個按鈕指令.</t>
<t tx="amd.20160319132434.1"></t>
<t tx="amd.20160319222458.1">@language md
Title: CodeForLife 編程套件介紹
Category: K-12
Tags: 導引
Author: code4future
@others
Code for Life &lt;a href="https://www.codeforlife.education/"&gt;https://www.codeforlife.education/&lt;/a&gt; 是一套適合幼稚園到國小兒童使用的編程教育套件.

&lt;!-- PELICAN_END_SUMMARY --&gt;

Rapid Router 則是其中由英國 Ocado 公司在 &lt;a href="http://www.ocadotechnology.com/our-blog/articles/why-weve-open-sourced-code-for-life"&gt;2015 年 10 月份開源&lt;/a&gt;釋出的全球資訊網套件 (&lt;a href="https://github.com/ocadotechnology/rapid-router"&gt;Rapid Router Github 倉儲&lt;/a&gt;, &lt;a href="https://twitter.com/codeforlifeuk"&gt;Code for Life Twitter&lt;/a&gt;), 採用 Javascript 與 Python 編寫, 並且架構在 &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; 全球資訊網框架上.

Rapid Router 從圖像編程入手, 規劃了適合 5-11 歲孩童電腦教學的教材, 並且逐步導入 Python 程式語法的教學, 其中的每一份教材都明確訂出進度與標的: &lt;a href="http://storage.googleapis.com/codeforlife-assets/general_resources/introduction_to_coding.pdf"&gt;http://storage.googleapis.com/codeforlife-assets/general_resources/introduction_to_coding.pdf&lt;/a&gt;.

同時, 老師註冊帳號後登入系統 ,就可以下載規劃完整的教學導引與學習評量內容, 儘管全部教材都是英文, 但若能夠藉由此份"快車找路"的類遊戲編程教學中, 讓孩童同時學習簡單的英文字句, 應該也是很不錯的額外收穫.</t>
<t tx="amd.20160319230246.1"></t>
<t tx="amd.20160319232117.1">@language md
Title: 數位運算博物館
Category: 專題研究
Tags: 數位運算, 電腦發展史
Author: code4future
@others
台灣是全世界重要的個人電腦生產國之一, 假如能夠有系統收集歷史上與數位運算相關的軟硬體相關資訊, 成立一個實體或虛擬的數位運算博物館, 那麼, 或許下一代年輕人能藉以鑑往知來, 在全球數位公民中扮演更重要的角色.

&lt;!-- PELICAN_END_SUMMARY --&gt;

英國運算博物館 (National Museum of Computing):

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_Sw15F2QzMQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

電腦發展史:

&lt;img src="http://code4futuretw.github.io/blogsite_data/files/computer_history_timeline.png" width="800" /&gt;

電腦博物館 (Computer Museum):

&lt;a href="https://en.wikipedia.org/wiki/The_Computer_Museum,_Boston"&gt;https://en.wikipedia.org/wiki/The_Computer_Museum,_Boston&lt;/a&gt;

&lt;a href="http://www.computerhistory.org/"&gt;http://www.computerhistory.org/&lt;/a&gt;

&lt;a href="http://tcm.computerhistory.org/"&gt;http://tcm.computerhistory.org/&lt;/a&gt;

從數位基礎到應用:

&lt;a href="http://www.nand2tetris.org/"&gt;http://www.nand2tetris.org/&lt;/a&gt;</t>
<t tx="amd.20160320001047.1">@language md
Title: 全雲端電腦輔助機械設計 3D 套件
Category: 社會人士
Tags: MCAD, CAD
Author: code4future
@others
一般人對於所謂的電腦輔助機械設計繪圖套件, 可能都還停留在單機 ,必須安裝, 必須經過軟硬體授權認証才能啟動的單機應用程式. 自從 2015 年3月份開始, 一群曾經在 1993 協助打造全世界第一套個人電腦操作系統上的 MCAD (Mechanical Computer Aided Design) 團隊, 推出了 OnShape, 從此您又多了一個選擇, 可以在各種電腦裝置 (包括手機與平板電腦) 上設計繪製 3D 的零組件, 不僅能與多人進行即時協同設計, 並且可以從擁有 500MB 到 5GB 的免費帳號開始入門.

&lt;!-- PELICAN_END_SUMMARY --&gt;

今天起, 請您暫時放下其他類似的 MCAD 套件, 開始關注: &lt;a href="https://www.onshape.com/"&gt;https://www.onshape.com/&lt;/a&gt;.

&lt;video controls autoplay="autoplay" width="800" height="600"&gt;
  &lt;source src="http://code4futuretw.github.io/blogsite_data/files/grab-windows700kb.mp4"&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;video controls autoplay="autoplay" width="800" height="600"&gt;
  &lt;source src="http://code4futuretw.github.io/blogsite_data/files/ipad-air-720p_700kb.mp4"&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;video controls autoplay="autoplay" width="800" height="600"&gt;
  &lt;source src="http://code4futuretw.github.io/blogsite_data/files/laptop-720p-apple700kb.mp4"&gt;
  Your browser does not support the video tag.
&lt;/video&gt;</t>
<t tx="leo.20151212173315.1"></t>
<t tx="leo.20151212173315.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20151212173315.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20151212173658.1">@language python
import os
#os.system("pelican content -o ./ -s publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican 執行完畢")

</t>
<t tx="leo.20151213085727.1">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="leo.20151213173811.1"></t>
<t tx="leo.20151213173830.1"></t>
<t tx="leo.20151213230723.1"></t>
<t tx="leo.20151213230729.1">利用

&lt;!-- PELICAN_END_SUMMARY --&gt;

來界定 Summary 摘要內容

前提, 必須設定 

PLUGIN_PATHS = ['plugin']

與

PLUGINS = ['liquid_tags.notebook', 'summary']

並且從 https://github.com/getpelican/pelican-plugins

取得 summary plugin</t>
<t tx="leo.20151213230957.1"># 設定網誌以 md 檔案建立的 file system date 為準, 無需自行設定

DEFAULT_DATE = 'fs'</t>
</tnodes>
</leo_file>
